/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Administrador;

import ejemploproyecto1.Login;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USUARIO
 */
public class AdministradorProfesores extends javax.swing.JFrame {

    //Para profesores
    public static Profesor[] profesores = new Profesor[50];
    public static int contadorProfesores;

    //Utilizado para actualizar profesor
    public static int fila;
    public static String codigo;
    public static String nombre;
    public static String apellido;
    public static String correo;
    public static String contraseña;
    public static String genero;

    //Para cursos
    public static Curso[] cursos = new Curso[100];
    public static int contadorCursos;

    //Utilizado para actualizar profesor
    //public static int fila;
    //public static String codigo;
    //public static String nombre;
    public static String creditos;
    public static String alumnos;
    public static String profesor;
    //public static String genero;

    /**
     * Creates new form NewJFrame
     */
    public AdministradorProfesores() {
        initComponents();
        actualizarListadoProfesores();
        actualizarListadoCursos();
        //No se cambie el tamaño de la ventana
        this.setResizable(false);
        //Utilizado para visualizar en el centro la ventana
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListadoProfesores = new javax.swing.JTable();
        CargaMBtn = new javax.swing.JButton();
        ActualizarBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        CrearProfBtn = new javax.swing.JButton();
        EliminarBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaGenero = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListadoCursos = new javax.swing.JTable();
        CargaMCursosBtn = new javax.swing.JButton();
        ActualizarCursosBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        CrearCursosBtn = new javax.swing.JButton();
        EliminarCursosBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaTop = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Listado Oficial");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        ListadoProfesores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Nombre", "Apellido", "Correo", "Contraseña", "Genero"
            }
        ));
        jScrollPane1.setViewportView(ListadoProfesores);
        if (ListadoProfesores.getColumnModel().getColumnCount() > 0) {
            ListadoProfesores.getColumnModel().getColumn(5).setHeaderValue("Genero");
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        CargaMBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CargaMBtn.setText("Carga Masiva");
        CargaMBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargaMBtnActionPerformed(evt);
            }
        });
        jPanel1.add(CargaMBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 160, 40));

        ActualizarBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ActualizarBtn.setText("Actualizar");
        ActualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarBtnActionPerformed(evt);
            }
        });
        jPanel1.add(ActualizarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 160, 40));

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton3.setText("Exportar listado a HTML");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 350, 40));

        CrearProfBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CrearProfBtn.setText("Crear");
        CrearProfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearProfBtnActionPerformed(evt);
            }
        });
        jPanel1.add(CrearProfBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, 160, 40));

        EliminarBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        EliminarBtn.setText("Eliminar");
        EliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarBtnActionPerformed(evt);
            }
        });
        jPanel1.add(EliminarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 160, 40));

        TablaGenero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Genero", "Porcentaje"
            }
        ));
        TablaGenero.setEnabled(false);
        jScrollPane2.setViewportView(TablaGenero);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, 340, 190));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Género de Profesores");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, -1, -1));

        jTabbedPane1.addTab("Profesores", jPanel1);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Listado Oficial");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        ListadoCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Nombre", "Creditos", "Alumnos", "Profesor"
            }
        ));
        jScrollPane3.setViewportView(ListadoCursos);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        CargaMCursosBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CargaMCursosBtn.setText("Carga Masiva");
        CargaMCursosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargaMCursosBtnActionPerformed(evt);
            }
        });
        jPanel3.add(CargaMCursosBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 160, 40));

        ActualizarCursosBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ActualizarCursosBtn.setText("Actualizar");
        ActualizarCursosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarCursosBtnActionPerformed(evt);
            }
        });
        jPanel3.add(ActualizarCursosBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 160, 40));

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton4.setText("Exportar listado a HTML");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 350, 40));

        CrearCursosBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CrearCursosBtn.setText("Crear");
        CrearCursosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearCursosBtnActionPerformed(evt);
            }
        });
        jPanel3.add(CrearCursosBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, 160, 40));

        EliminarCursosBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        EliminarCursosBtn.setText("Eliminar");
        EliminarCursosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCursosBtnActionPerformed(evt);
            }
        });
        jPanel3.add(EliminarCursosBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 160, 40));

        TablaTop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Puesto", "Curso", "Cantidad"
            }
        ));
        TablaTop.setEnabled(false);
        jScrollPane4.setViewportView(TablaTop);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, 340, 190));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Top 3 - Cursos con más estudiantes");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, -1, -1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 871, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Cursos", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargaMBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargaMBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(null);

        String filePath = fc.getSelectedFile().getAbsolutePath();
        System.out.println(filePath);

        BufferedReader reader = null;
        String line = "";

        contadorProfesores = 0;

        try {
            reader = new BufferedReader(new FileReader(filePath));
            int contadorFila = 0;
            while ((line = reader.readLine()) != null) {
                if (contadorFila > 0) {
                    String[] columnas = line.split(";");

                    Profesor prof = new Profesor(columnas[0], columnas[1], columnas[2], columnas[3], "1234", columnas[4]);

                    profesores[contadorFila - 1] = prof;
                }
                contadorFila++;
            }
            contadorProfesores = contadorFila - 1;
            System.out.println(Arrays.toString(profesores));
            actualizarListadoProfesores();
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_CargaMBtnActionPerformed

    private void CrearProfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearProfBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        CrearProfesor cp = new CrearProfesor();
        cp.setVisible(true);
    }//GEN-LAST:event_CrearProfBtnActionPerformed

    private void ActualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarBtnActionPerformed
        // TODO add your handling code here:
        fila = ListadoProfesores.getSelectedRow();

        codigo = ListadoProfesores.getModel().getValueAt(fila, 0).toString();
        nombre = ListadoProfesores.getModel().getValueAt(fila, 1).toString();
        apellido = ListadoProfesores.getModel().getValueAt(fila, 2).toString();
        correo = ListadoProfesores.getModel().getValueAt(fila, 3).toString();
        contraseña = ListadoProfesores.getModel().getValueAt(fila, 4).toString();
        genero = ListadoProfesores.getModel().getValueAt(fila, 5).toString();

        this.setVisible(false);
        ActualizarProfesor ap = new ActualizarProfesor();
        ap.setVisible(true);
    }//GEN-LAST:event_ActualizarBtnActionPerformed

    private void EliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarBtnActionPerformed
        // TODO add your handling code here:
        fila = ListadoProfesores.getSelectedRow();

        //Usada para ocupar el espacio de la palabra elminada
        for (int i = fila; i < contadorProfesores; i++) {
            profesores[i] = profesores[i + 1];
        }
        //Se reduce en uno la cantidad de profesores
        contadorProfesores--;

        actualizarListadoProfesores();
    }//GEN-LAST:event_EliminarBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setVisible(false);
        Login lg = new Login();
        lg.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void CargaMCursosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargaMCursosBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(null);

        String filePath = fc.getSelectedFile().getAbsolutePath();
        System.out.println(filePath);

        BufferedReader reader = null;
        String line = "";

        contadorCursos = 0;

        try {
            reader = new BufferedReader(new FileReader(filePath));
            int contadorFila = 0;
            while ((line = reader.readLine()) != null) {
                if (contadorFila > 0) {
                    String[] columnas = line.split(";");

                    int cantAlumnos = (int) Math.floor(Math.random() * (80 - 0) + 0);
                    Curso cur = new Curso(columnas[0], columnas[1], columnas[2], String.valueOf(cantAlumnos), columnas[3]);

                    cursos[contadorFila - 1] = cur;
                }
                contadorFila++;
            }
            contadorCursos = contadorFila - 1;
            System.out.println(Arrays.toString(cursos));
            actualizarListadoCursos();
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_CargaMCursosBtnActionPerformed

    private void ActualizarCursosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarCursosBtnActionPerformed
        // TODO add your handling code here:
        fila = ListadoCursos.getSelectedRow();

        codigo = ListadoCursos.getModel().getValueAt(fila, 0).toString();
        nombre = ListadoCursos.getModel().getValueAt(fila, 1).toString();
        creditos = ListadoCursos.getModel().getValueAt(fila, 2).toString();
        alumnos = ListadoCursos.getModel().getValueAt(fila, 3).toString();
        profesor = ListadoCursos.getModel().getValueAt(fila, 4).toString();

        this.setVisible(false);
        ActualizarCursos ap = new ActualizarCursos();
        ap.setVisible(true);
    }//GEN-LAST:event_ActualizarCursosBtnActionPerformed

    private void CrearCursosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearCursosBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        CrearCurso cp = new CrearCurso();
        cp.setVisible(true);
    }//GEN-LAST:event_CrearCursosBtnActionPerformed

    private void EliminarCursosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCursosBtnActionPerformed
        // TODO add your handling code here:
        fila = ListadoCursos.getSelectedRow();

        //Usada para ocupar el espacio de la palabra elminada
        for (int i = fila; i < contadorCursos; i++) {
            cursos[i] = cursos[i + 1];
        }
        //Se reduce en uno la cantidad de profesores
        contadorCursos--;

        actualizarListadoCursos();
    }//GEN-LAST:event_EliminarCursosBtnActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String cadenaHTML = "<!DOCTYPE html>\n"
                + "<html>\n"
                + "<body>\n"
                + "\n"
                + "<h1>Ejemplo</h1>\n"
                + "\n"
                + "<table style=\"margin:auto\">\n"
                + "     <tr>\n"
                + "         <th>Codigo</th>\n"
                + "         <th>Nombre</th>\n"
                + "         <th>Creditos</th>\n"
                + "         <th>Alumnos</th>\n"
                + "         <th>Profesor</th>\n"
                + "     </tr>";

        for (int i = 0; i < contadorCursos; i++) {
            cadenaHTML += "<tr>\n"
                    + "<td>" + cursos[i].codigo + "</td>\n"
                    + "<td>" + cursos[i].nombre + "</td>\n"
                    + "<td>" + cursos[i].creditos + "</td>\n"
                    + "<td>" + cursos[i].alumnos + "</td>\n"
                    + "<td>" + cursos[i].profesor + "</td>\n"
                    + "</tr>";

        }
        
        cadenaHTML += "</table>\n"
                + "</body>\n"
                + "</html>\n";
        
        System.out.println(cadenaHTML);
        
        FileWriter fichero = null;
        PrintWriter pw = null;
        
        try {
            fichero = new FileWriter("./Reportes/ReporteCursosHTML.html");
            pw = new PrintWriter(fichero);
            
            pw.println(cadenaHTML);
            fichero.close();
            System.out.println(cadenaHTML);
            
        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String cadenaHTML = "<!DOCTYPE html>\n"
                + "<html>\n"
                + "<body>\n"
                + "\n"
                + "<h1>Ejemplo</h1>\n"
                + "\n"
                + "<table style=\"margin:auto\">\n"
                + "     <tr>\n"
                + "         <th>Codigo</th>\n"
                + "         <th>Nombre</th>\n"
                + "         <th>Apellido</th>\n"
                + "         <th>Correo</th>\n"
                + "         <th>Contraseña</th>\n"
                + "         <th>Genero</th>\n"
                + "     </tr>";

        for (int i = 0; i < contadorProfesores; i++) {
            cadenaHTML += "<tr>\n"
                    + "<td>" + profesores[i].codigo + "</td>\n"
                    + "<td>" + profesores[i].nombre + "</td>\n"
                    + "<td>" + profesores[i].apellido + "</td>\n"
                    + "<td>" + profesores[i].correo + "</td>\n"
                    + "<td>" + profesores[i].contraseña + "</td>\n"
                    + "<td>" + profesores[i].genero + "</td>\n"
                    + "</tr>";

        }
        
        cadenaHTML += "</table>\n"
                + "</body>\n"
                + "</html>\n";
        
        System.out.println(cadenaHTML);
        
        FileWriter fichero = null;
        PrintWriter pw = null;
        
        try {
            fichero = new FileWriter("./Reportes/ReporteProfesoresHTML.html");
            pw = new PrintWriter(fichero);
            
            pw.println(cadenaHTML);
            fichero.close();
            System.out.println(cadenaHTML);
            
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void actualizarListadoProfesores() {

        if (contadorProfesores > 0) {

            //Actualizar listado
            DefaultTableModel modeloListado = (DefaultTableModel) ListadoProfesores.getModel();
            modeloListado.setRowCount(contadorProfesores);

            for (int i = 0; i < contadorProfesores; i++) {
                modeloListado.setValueAt(profesores[i].codigo, i, 0);
                modeloListado.setValueAt(profesores[i].nombre, i, 1);
                modeloListado.setValueAt(profesores[i].apellido, i, 2);
                modeloListado.setValueAt(profesores[i].correo, i, 3);
                modeloListado.setValueAt(profesores[i].contraseña, i, 4);
                modeloListado.setValueAt(profesores[i].genero, i, 5);
            }

            //Contar generos
            int masculino = 0;
            int femenino = 0;

            for (int i = 0; i < contadorProfesores; i++) {
                //Si es hombre
                if (profesores[i].genero.equals("M")) {
                    masculino++;
                    //Si es mujer
                } else {
                    femenino++;
                }
            }

            //Actualizar tabla generos
            DefaultTableModel modeloListadoG = (DefaultTableModel) TablaGenero.getModel();
            modeloListadoG.setValueAt("Femenino", 0, 0);
            modeloListadoG.setValueAt("Masculino", 1, 0);
            modeloListadoG.setValueAt((double) ((double) femenino / (double) contadorProfesores) * 100 + "%", 0, 1);
            modeloListadoG.setValueAt((double) ((double) masculino / (double) contadorProfesores) * 100 + "%", 1, 1);
        }
    }

    public void actualizarListadoCursos() {
        if (contadorCursos > 0) {

            //Actualizar listado
            DefaultTableModel modeloListadoc = (DefaultTableModel) ListadoCursos.getModel();
            modeloListadoc.setRowCount(contadorCursos);

            for (int i = 0; i < contadorCursos; i++) {
                modeloListadoc.setValueAt(cursos[i].codigo, i, 0);
                modeloListadoc.setValueAt(cursos[i].nombre, i, 1);
                modeloListadoc.setValueAt(cursos[i].creditos, i, 2);
                modeloListadoc.setValueAt(cursos[i].alumnos, i, 3);
                modeloListadoc.setValueAt(cursos[i].profesor, i, 4);
            }

            //hacer top 3
            Curso[] arregloCopia = cursos.clone();
            //Burbuja
            for (int comprobacion = 0; comprobacion < contadorCursos; comprobacion++) {
                //Ciclo para recorrer los elementos del arreglo
                for (int elementoArreglo = 0; elementoArreglo < contadorCursos - 1; elementoArreglo++) {
                    Curso elementoActual = arregloCopia[elementoArreglo];
                    Curso elementoSiguiente = arregloCopia[elementoArreglo + 1];

                    //Si el actual es mayor al siguiente
                    if (Integer.valueOf(elementoActual.alumnos) < Integer.valueOf(elementoSiguiente.alumnos)) {
                        //Se hace el intercambio
                        arregloCopia[elementoArreglo] = elementoSiguiente;
                        arregloCopia[elementoArreglo + 1] = elementoActual;
                    }
                }
            }

            //Actualizar listado
            DefaultTableModel modelotop = (DefaultTableModel) TablaTop.getModel();

            modelotop.setValueAt("1", 0, 0);
            modelotop.setValueAt("2", 1, 0);
            modelotop.setValueAt("3", 2, 0);

            for (int i = 0; i < 3; i++) {
                modelotop.setValueAt(arregloCopia[i].nombre, i, 1);
                modelotop.setValueAt(arregloCopia[i].alumnos, i, 2);
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdministradorProfesores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdministradorProfesores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdministradorProfesores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministradorProfesores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdministradorProfesores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarBtn;
    private javax.swing.JButton ActualizarCursosBtn;
    private javax.swing.JButton CargaMBtn;
    private javax.swing.JButton CargaMCursosBtn;
    private javax.swing.JButton CrearCursosBtn;
    private javax.swing.JButton CrearProfBtn;
    private javax.swing.JButton EliminarBtn;
    private javax.swing.JButton EliminarCursosBtn;
    private javax.swing.JTable ListadoCursos;
    private javax.swing.JTable ListadoProfesores;
    private javax.swing.JTable TablaGenero;
    private javax.swing.JTable TablaTop;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
